var documenterSearchIndex = {"docs":
[{"location":"#LibAwsChecksums","page":"Home","title":"LibAwsChecksums","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LibAwsChecksums.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#LibAwsChecksums.aws_checksums_crc32-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsChecksums.aws_checksums_crc32","text":"aws_checksums_crc32(input, length, previous_crc32)\n\nThe entry point function to perform a CRC32 (Ethernet, gzip) computation. Selects a suitable implementation based on hardware capabilities. Pass 0 in the previousCrc32 parameter as an initial value unless continuing to update a running crc in a subsequent call.\n\nPrototype\n\nuint32_t aws_checksums_crc32(const uint8_t *input, int length, uint32_t previous_crc32);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsChecksums.aws_checksums_crc32_ex-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsChecksums.aws_checksums_crc32_ex","text":"aws_checksums_crc32_ex(input, length, previous_crc32)\n\nThe entry point function to perform a CRC32 (Ethernet, gzip) computation. Supports buffer lengths up to size_t max. Selects a suitable implementation based on hardware capabilities. Pass 0 in the previousCrc32 parameter as an initial value unless continuing to update a running crc in a subsequent call.\n\nPrototype\n\nuint32_t aws_checksums_crc32_ex(const uint8_t *input, size_t length, uint32_t previous_crc32);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsChecksums.aws_checksums_crc32c-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsChecksums.aws_checksums_crc32c","text":"aws_checksums_crc32c(input, length, previous_crc32c)\n\nThe entry point function to perform a Castagnoli CRC32c (iSCSI) computation. Selects a suitable implementation based on hardware capabilities. Pass 0 in the previousCrc32 parameter as an initial value unless continuing to update a running crc in a subsequent call.\n\nPrototype\n\nuint32_t aws_checksums_crc32c(const uint8_t *input, int length, uint32_t previous_crc32c);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsChecksums.aws_checksums_crc32c_ex-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsChecksums.aws_checksums_crc32c_ex","text":"aws_checksums_crc32c_ex(input, length, previous_crc32c)\n\nThe entry point function to perform a Castagnoli CRC32c (iSCSI) computation. Supports buffer lengths up to size_t max. Selects a suitable implementation based on hardware capabilities. Pass 0 in the previousCrc32 parameter as an initial value unless continuing to update a running crc in a subsequent call.\n\nPrototype\n\nuint32_t aws_checksums_crc32c_ex(const uint8_t *input, size_t length, uint32_t previous_crc32c);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsChecksums.aws_checksums_crc64nvme-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsChecksums.aws_checksums_crc64nvme","text":"aws_checksums_crc64nvme(input, length, previous_crc64)\n\nThe entry point function to perform a CRC64-NVME (a.k.a. CRC64-Rocksoft) computation. Selects a suitable implementation based on hardware capabilities. Pass 0 in the previousCrc64 parameter as an initial value unless continuing to update a running crc in a subsequent call. There are many variants of CRC64 algorithms. This CRC64 variant is bit-reflected (based on the non bit-reflected polynomial 0xad93d23594c93659) and inverts the CRC input and output bits.\n\nPrototype\n\nuint64_t aws_checksums_crc64nvme(const uint8_t *input, int length, uint64_t previous_crc64);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsChecksums.aws_checksums_crc64nvme_ex-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsChecksums.aws_checksums_crc64nvme_ex","text":"aws_checksums_crc64nvme_ex(input, length, previous_crc64)\n\nThe entry point function to perform a CRC64-NVME (a.k.a. CRC64-Rocksoft) computation. Supports buffer lengths up to size_t max. Selects a suitable implementation based on hardware capabilities. Pass 0 in the previousCrc64 parameter as an initial value unless continuing to update a running crc in a subsequent call. There are many variants of CRC64 algorithms. This CRC64 variant is bit-reflected (based on the non bit-reflected polynomial 0xad93d23594c93659) and inverts the CRC input and output bits.\n\nPrototype\n\nuint64_t aws_checksums_crc64nvme_ex(const uint8_t *input, size_t length, uint64_t previous_crc64);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsChecksums.aws_checksums_library_clean_up-Tuple{}","page":"Home","title":"LibAwsChecksums.aws_checksums_library_clean_up","text":"aws_checksums_library_clean_up()\n\nShuts down the internal data structures used by aws-checksums.\n\nPrototype\n\nvoid aws_checksums_library_clean_up(void);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsChecksums.aws_checksums_library_init-Tuple{Any}","page":"Home","title":"LibAwsChecksums.aws_checksums_library_init","text":"aws_checksums_library_init(allocator)\n\nInitializes internal data structures used by aws-checksums. MUST be called before using any functionality in aws-checksums. Note: historically aws-checksums lazily initialized stuff and things worked without init. However, DO NOT rely on that behavior and explicitly call init instead.\n\nPrototype\n\nvoid aws_checksums_library_init(struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"}]
}
